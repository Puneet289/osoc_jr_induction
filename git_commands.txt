1. git checkout:
In addition to checking out old commits and old file revisions, git checkout is also the means to navigate existing branches. Combined with the basic Git commands, it’s a way to work on a particular line of development.

2. git clean:
Removes untracked files from the working directory. This is the logical counterpart to git reset, which (typically) only operates on tracked files.

3. git clone:
Creates a copy of an existing Git repository. Cloning is the most common way for developers to obtain a working copy of a central repository.

4. git commit:
Takes the staged snapshot and commits it to the project history. Combined with git add, this defines the basic workflow for all Git users.

5. git commit --amend
Passing the --amend flag to git commit lets you amend the most recent commit. This is very useful when you forget to stage a file or omit important information from the commit message.

6. git config:
A convenient way to set configuration options for your Git installation. You’ll typically only need to use this immediately after installing Git on a new development machine.

7. git fetch:
Fetching downloads a branch from another repository, along with all of its associated commits and files. But, it doesn't try to integrate anything into your local repository. This gives you a chance to inspect changes before merging them with your project.

8. git init:
Initializes a new Git repository. If you want to place a project under revision control, this is the first command you need to learn.

9. git rebase:
Rebasing lets you move branches around, which helps you avoid unnecessary merge commits. The resulting linear history is often much easier to understand and explore.

10. git remote:
A convenient tool for administering remote connections. Instead of passing the full URL to the fetch, pull, and push commands, it lets you use a more meaningful shortcut.

